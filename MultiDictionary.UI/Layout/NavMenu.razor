@using MultiDictionary.Shared.ViewModels
@inject IGlossaryService GlossaryService

<nav class="nav-menu">
    <a class="navbar-brand" href="\">MultiDictionary</a>
    <p @onclick="ToggleGlossaryMenu" class="nav-item glossaries" active-class="active">Glossaries <i class="fa-solid fa-chevron-down @GetArrowClass() "></i></p>

    @if (showGlossaries && glossaries != null)
    {
        <ul class="glossary-list" >
            @foreach (var glossary in glossaries)
            {
                <li @onclick="() => NavigateToGlossary(glossary.Id)">
                        @glossary.Name
                </li>
            }
        </ul>
    }
   
    <a href="/test" class="nav-item" active-class="active">Test</a>

</nav>

@code {
    private bool showGlossaries = false;
    private IEnumerable<GlossaryViewModel>? glossaries;
    [Inject] NavigationManager NavManager { get; set; }

    void NavigateToGlossary(int id)
    {
        NavManager.NavigateTo($"/words/{id}");
    }

    private async Task ToggleGlossaryMenu()
    {
        showGlossaries = !showGlossaries; // Toggles visibility

        if (showGlossaries && glossaries == null)
        {
            glossaries = await GlossaryService.GetAllAsync(false); // Fetch glossaries on first expand
        }
    }

    private string GetArrowClass()
    {
        return showGlossaries ? "rotate" : "";
    }
}