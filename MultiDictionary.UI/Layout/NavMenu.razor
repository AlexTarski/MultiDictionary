@using MultiDictionary.Shared.ViewModels
@using MultiDictionary.UI.Pages
@inject IGlossaryService GlossaryService

<nav class="nav-menu">
    <a class="navbar-brand" href="\">MultiDictionary</a>
    <p @onclick="ToggleGlossaryMenu" class="nav-item glossaries" active-class="active">
        Glossaries 
        <div @onclick:stopPropagation class="glossaries icons">
            <i @onclick="AddGlossary" class="fa-solid fa-plus" data-bs-toggle="tooltip" title="Add Glossary"></i>
            <i @onclick="ToggleGlossaryMenu" class="fa-solid fa-chevron-down @GetArrowClass() "></i>
        </div>
    </p>

    @if (showGlossaries && glossaries != null)
    {
        <ul class="glossary-list" >
            @foreach (var glossary in glossaries)
            {
                <li class="item" @onclick="() => { NavigateToGlossary(glossary.Id); SelectGlossary(glossary.Id); isDeletingGlossary = false; }">
                    <p class="name">
                        @glossary.Name
                    </p>
                    <div @onclick:stopPropagation>
                        <i class="fa-solid fa-trash-can" @onclick="() => { MarkGlossaryToDelete(glossary.Id); ShowConfirmDialog(); SelectGlossary(glossary.Id); }" data-bs-toggle="tooltip" title="Delete Glossary"></i>
                        @if(selectedGlossaryId == glossary.Id) //show arrow only for currently opened glossary
                        {
                            <i class="fa-solid fa-angle-right"></i>
                        }
                    </div>
                    @if(isDeletingGlossary && selectedGlossaryId == glossary.Id)
                    {
                        <div class="confirm-dialog">
                            <p>Are you sure?</p>
                            <button type="submit" class="btn btn-primary" @onclick="() => HandleConfirmation(true)">Yes!</button>
                            <button type="button" class="btn btn-secondary" @onclick="() => HandleConfirmation(false)">Cancel!</button>
                        </div>
                    }
                </li>
            }

            @if (isAddingNewGlossary)
            {
                <li>
                    <EditForm Model="newGlossary" OnValidSubmit="async () => await SaveGlossary()">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label asp-for="Name">Glossary Name:</label>
                            <InputText id="glossaryName" class="form-control" @bind-Value="newGlossary.Name" />
                            <ValidationMessage For="@(() => newGlossary.Name)" class="text-danger" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CancelGlossary">Cancel</button>
                    </EditForm>
                </li>
            }
        </ul>
    }
   
    <a href="/test" class="nav-item" active-class="active">Test</a>

</nav>

@code {
    private bool showGlossaries = false;
    private bool isAddingNewGlossary = false;
    private bool isDeletingGlossary = false;
    private int? selectedGlossaryId;
    private int? glossaryToDeleteId;
    private GlossaryViewModel newGlossary = new GlossaryViewModel { Name = "New Glossary" };
    private IEnumerable<GlossaryViewModel>? glossaries;
    [Inject] NavigationManager NavManager { get; set; }

    private void NavigateToGlossary(int id)
    {
        NavManager.NavigateTo($"/words/{id}");
    }

    private async Task ToggleGlossaryMenu()
    {
        showGlossaries = !showGlossaries; // Toggles visibility

        if (showGlossaries)
        {
            glossaries = await GlossaryService.GetAllAsync(false);
        }
    }

    private void ShowConfirmDialog()
    {
        isDeletingGlossary = true;
    }

    private void MarkGlossaryToDelete(int glossaryId)
    {
        glossaryToDeleteId = glossaryId;
    }

    private void AddGlossary()
    {
        if(!showGlossaries)
        {
            showGlossaries = true;
        }

        isAddingNewGlossary = true;
    }

    private void CancelGlossary()
    {
        isAddingNewGlossary = false;
        newGlossary = new GlossaryViewModel { Name = "New Glossary" };
    }

    private async Task SaveGlossary()
    {
        if (!string.IsNullOrWhiteSpace(newGlossary.Name))
        {
            await GlossaryService.AddEntityAsync(newGlossary);
            glossaries = await GlossaryService.GetAllAsync(false);
        }

        isAddingNewGlossary = false;
        newGlossary = new GlossaryViewModel { Name = "New Glossary" };
    }

    private async Task DeleteGlossary(int? glossaryId)
    {
        try
        {
            if (glossaryId != null)
            {
                await GlossaryService.DeleteEntityAsync((int)glossaryId);
                isDeletingGlossary = false;
                glossaryToDeleteId = null;
                glossaries = await GlossaryService.GetAllAsync(false);
            }
            else
            {
                throw new ArgumentNullException(nameof(glossaryId), "Glossary ID is null");
            }

        }
        catch(ArgumentNullException ex)
        {
            Console.WriteLine($"Failed to delete a glossary: {ex.Message}");
        }
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if(confirmed)
        {
            await DeleteGlossary(glossaryToDeleteId);
        }
        else
        {
            glossaryToDeleteId = null;
            isDeletingGlossary = false;
        }
    }

    private string GetArrowClass()
    {
        return showGlossaries ? "rotate" : "";
    }

    private void SelectGlossary(int glossaryId) //get currently opened glossary
    {
        selectedGlossaryId =  glossaryId;
    }
}