@page "/words/{glossaryId:int}"
@using MultiDictionary.Shared.ViewModels
@using MultiDictionary.UI.Interfaces
@inject IWordService WordService

<button type="button" class="btn btn-light add-word-btn" @onclick="AddWord">Add a new Word!</button>

<ul class="word-list">
    @if(!words.Any())
    {
        <li class="word-item">
            <div class="word-header">
                <span class="word-name">Glossary is empty!</span>
            </div>
        </li>
    }
    @if (isAddingNewWord)
    {
        <li class="add-word-item">
            <EditForm Model="newWord" OnValidSubmit="async () => await SaveWord()">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label asp-for="WordName">Word:</label>
                    <InputText id="wordName" class="form-control" @bind-Value="newWord.WordName" placeholder="Enter Word..."/>
                    <ValidationMessage For="@(() => newWord.WordName)" class="text-danger-add-word" style="color: #BA1A1A" />
                    <label asp-for="Theme">Theme:</label>
                    <InputText id="theme" class="form-control" @bind-Value="newWord.Theme" placeholder="Enter theme..."/>
                    <ValidationMessage For="@(() => newWord.Theme)" class="text-danger-add-word" style="color: #BA1A1A" />
                    <label asp-for="Definition">Definition:</label>
                    <InputText id="definition" class=" form-control" @bind-Value="newWord.Definition" placeholder="Enter definition..."/>
                    <ValidationMessage For="@(() => newWord.Definition)" class="text-danger-add-word" style="color: #BA1A1A" />
                    <label asp-for="AdditionalInfo">Additional Info:</label>
                    <InputText id="additionalInfo" class="form-control" @bind-Value="newWord.AdditionalInfo" placeholder="Enter additional info..."/>
                    <ValidationMessage For="@(() => newWord.AdditionalInfo)" class="text-danger-add-word" style="color: #BA1A1A" />
                </div>

                <button type="submit" class="btn btn-primary confirm-btn">Save</button>
                <button type="button" class="btn btn-secondary cancel-btn" @onclick="CancelWord">Cancel</button>
            </EditForm>
        </li>
    }
    @foreach (var word in words)
    {
        <li class="word-item">
            <div class="word-header">
                <div class="word-and-theme">
                    <span class="word-name">@word.WordName</span>
                    <span class="word-theme">@word.Theme</span>
                </div>

                @if (isDeletingWord && wordToDeleteId == word.Id)
                {
                    <div class="confirm-dialog">
                        <p class="label" style="color: #0F1E1C">Are you sure?</p>
                        <div class="confirmation-btns">
                            <button type="submit" class="btn btn-primary confirm-btn" @onclick="() => HandleConfirmation(true)">Yes!</button>
                            <button type="button" class="btn btn-secondary cancel-btn" @onclick="() => HandleConfirmation(false)">Cancel!</button>
                        </div>
                    </div>
                }
                else
                {
                    <i class="fa-solid fa-trash-can" @onclick="() => { MarkWordToDelete(word.Id); ShowConfirmDialog(); }" data-bs-toggle="tooltip" title="Delete Word"></i>
                }
            </div>
            <div class="word-definition">
                @word.Definition
            </div>
            <div class="word-additional-info">
                @word.AdditionalInfo
            </div>
        </li>
    }
</ul>


@code {
    [Parameter]
    public int glossaryId { get; set; }

    private bool isAddingNewWord = false;
    private bool isDeletingWord = false;
    private int? wordToDeleteId;
    private WordViewModel newWord = new WordViewModel { WordName = "New Word" };
    private IEnumerable<WordViewModel> words = new List<WordViewModel>();

    protected override async Task OnInitializedAsync()
    {
        words = await WordService.GetWordsByGlossaryAsync(glossaryId);
    }

    protected override async Task OnParametersSetAsync()
    {
        words = await WordService.GetWordsByGlossaryAsync(glossaryId);
        isAddingNewWord = false;
        isDeletingWord = false;
    }

    private void AddWord()
    {
        isAddingNewWord = !isAddingNewWord;
        if(isAddingNewWord)
        {
            newWord.GlossaryId = glossaryId;
        }
    }

    private void CancelWord()
    {
        isAddingNewWord = false;
        newWord = new WordViewModel { WordName = "New Word" };
    }

    private async Task SaveWord()
    {
        if (!string.IsNullOrWhiteSpace(newWord.WordName))
        {
            await WordService.AddEntityAsync(newWord);
            words = await WordService.GetWordsByGlossaryAsync(glossaryId);
        }

        isAddingNewWord = false;
        newWord = new WordViewModel { WordName = "New Word" };
    }

    private void ShowConfirmDialog()
    {
        isDeletingWord = true;
    }

    private void MarkWordToDelete(int wordId)
    {
        wordToDeleteId = wordId;
    }

    private async Task HandleConfirmation(bool confirmed)
    {
        if(confirmed)
        {
            await DeleteWord(wordToDeleteId);
        }
        else
        {
            wordToDeleteId = null;
            isDeletingWord = false;
        }
    }

    private async Task DeleteWord(int? wordId)
    {
        try
        {
            if(wordId != null)
            {
                await WordService.DeleteEntityAsync((int)wordId);
                wordToDeleteId = null;
                isDeletingWord = false;
                words = await WordService.GetWordsByGlossaryAsync(glossaryId);
            }
            else
            {
                throw new ArgumentNullException(nameof(wordId), "Word ID is null");
            }
        }
        catch(ArgumentNullException ex)
        {
            Console.WriteLine($"Failed to delete a word: {ex.Message}");
        }
    }
}